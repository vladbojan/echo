type User {
  id: ID! @unique
  email: String! @unique
  password: String!
  name: String!
  stories: [Story!]! @relation(name: "StoryToUser" onDelete: CASCADE)
  notes: [Note!]! @relation(name: "NoteToUser" onDelete: CASCADE)
}

type Paragraph {
  id: ID! @unique
  published: Boolean! @default(value: false)
  content: String!
  styling: String
  media: String
  parent: Frame! @relation(name: "ParagraphToFrame")
  position: String
}

type Frame {
  id: ID! @unique
  published: Boolean! @default(value: false)
  title: String!
  styling: String
  media: String
  paragraphs: [Paragraph!]! @relation(name: "ParagraphToFrame" onDelete: CASCADE)
  parent: Scene! @relation(name: "FrameToScene")
  position: String
}

type Scene {
  id: ID! @unique
  published: Boolean! @default(value: false)
  title: String
  styling: String! @default(value: "false")
  media: String! @default(value: "false")
  frames: [Frame!]! @relation(name: "FrameToScene" onDelete: CASCADE)
  parent: Story! @relation(name: "SceneToStory")
  position: String
}

type Story {
  id: ID! @unique
  published: Boolean! @default(value: false)
  title: String
  styling: String! @default(value: "false")
  media: String! @default(value: "false")
  scenes: [Scene!]! @relation(name: "SceneToStory" onDelete: CASCADE)
  author: User! @relation(name: "StoryToUser")
  position: String
}

type Note {
  id: ID! @unique
  content: String!
  author: User! @relation(name: "NoteToUser")
  position: String
}