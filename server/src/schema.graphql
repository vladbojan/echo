enum OrderByField {
  position_ASC
  position_DESC
}

type Query {
  draftParagraphs: [Paragraph!]
  paragraphs(orderBy: OrderByField): [Paragraph!]
  paragraph(id: ID!): Paragraph
  frame(id: ID!): Frame
  frames(orderBy: OrderByField): [Frame!]
  draftFrames: [Frame!]
  scenes(orderBy: OrderByField): [Scene!]
  draftScenes: [Scene!]
  me: User
  users: [User!]
  stories: [Story!]
  story(id: ID!): Story
  user(email: String!): User
}

input ParagraphInput {
  published: Boolean!
  content: String!
  styling: String
  media: String
}

type Mutation {
  createParagraph(content: String!, styling: String, media: String, parentId: String, position: String): Paragraph
  updateParagraph(id: ID!, content: String!, styling: String, media: String): Paragraph
  deleteParagraph(id: ID!): Paragraph
  publishParagraph(id: ID!): Paragraph

  createFrame(title: String!, styling: String, media: String, parentId: String, position: String): Frame
  updateFrame(id: ID!, title: String!, styling: String, media: String, position: String): Frame
  deleteFrame(id: ID!): Frame
  publishFrame(id: ID!): Frame

  createScene(title: String!, styling: String, media: String, parentId: String, position: String): Scene
  updateScene(id: ID!, title: String!, styling: String, media: String, position: String): Scene
  deleteScene(id: ID!): Scene
  publishScene(id: ID!): Scene

  createStory(title: String!, styling: String, media: String, position: String): Story
  updateStory(id: ID!, title: String!, styling: String, media: String, position: String): Story
  deleteStory(id: ID!): Story
  publishStory(id: ID!): Story

  createUser(email: String!): User
}

type Paragraph {
  id: ID!
  published: Boolean!
  content: String!
  styling: String
  media: String
  parent: Frame!
  position: String
}

type Frame {
  id: ID!
  published: Boolean!
  title: String!
  styling: String
  media: String
  paragraphs: [Paragraph!]!
  parent: Scene!
  position: String
}

type Scene {
  id: ID!
  published: Boolean!
  title: String!
  styling: String
  media: String
  frames: [Frame!]!
  parent: Story!
  position: String
}

type Story {
  id: ID!
  published: Boolean!
  title: String!
  styling: String
  media: String
  scenes: [Scene!]!
  author: User!
  position: String
}

type User {
  id: ID!
  email: String!
  name: String!
  stories: [Story!]!
}